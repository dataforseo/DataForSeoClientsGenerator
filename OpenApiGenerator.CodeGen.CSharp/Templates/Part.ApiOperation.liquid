{%- if operation.HttpMethod == "POST" -%}
public virtual async Task<{{ operation.ResponseType.TypeName }}> {{ operation.OperationName }}Async({{ operation.RequestType.TypeName }} payload)
{
    using (var request = new HttpRequestMessage())
    {
        var json = JsonConvert.SerializeObject(payload, _settings);
        var content = new StringContent(json);
        content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
        request.Content = content;
        request.Method = new HttpMethod("POST");
        request.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));
        var urlBuilder = new StringBuilder();
        if (!string.IsNullOrEmpty(_baseUrl))
            urlBuilder.Append(_baseUrl);
        var path = "{{ operation.Path }}";
        urlBuilder.Append(path);
        var url = urlBuilder.ToString();
        request.RequestUri = new Uri(url, UriKind.RelativeOrAbsolute);
        using (var response = await _httpClient.SendAsync(request, HttpCompletionOption.ResponseHeadersRead).ConfigureAwait(false))
        {
            var headers = new Dictionary<string, IEnumerable<string>>();
            foreach (var item_ in response.Headers)
                headers[item_.Key] = item_.Value;
            if (response.Content != null && response.Content.Headers != null)
            {
                foreach (var item_ in response.Content.Headers)
                    headers[item_.Key] = item_.Value;
            }

            var status = (int)response.StatusCode;
            if (status == 200)
            {
                var objectResponse = await ReadObjectResponseAsync<{{ operation.ResponseType.TypeName }}>(response, headers).ConfigureAwait(false);
                return objectResponse.Object;
            }

            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            throw new ApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
        }
    }
}
{%- else -%}
    {%- if operation.GetParameter != null -%}
public virtual async Task<{{ operation.ResponseType.TypeName }}> {{ operation.OperationName }}Async({{ operation.GetParameter.Type.TypeName }} {{ operation.GetParameter.Name }})
    {%- else -%}
public virtual async Task<{{ operation.ResponseType.TypeName }}> {{ operation.OperationName }}Async()
    {%- endif -%}
{
    using (var request = new HttpRequestMessage())
    {
        request.Method = new HttpMethod("GET");
        request.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));
        var urlBuilder = new StringBuilder();
        if (!string.IsNullOrEmpty(_baseUrl))
            urlBuilder.Append(_baseUrl);
        var path = "{{ operation.Path }}"
        {% if operation.GetParameter != null %}
            .Replace("{{ "{" }}{{ operation.GetParameter.Name  }}{{ "}" }}", {{ operation.GetParameter.Name }}.ToString())
        {% endif %}
        ;
        urlBuilder.Append(path);
        var url = urlBuilder.ToString();
        request.RequestUri = new Uri(url, UriKind.RelativeOrAbsolute);
        using (var response = await _httpClient.SendAsync(request, HttpCompletionOption.ResponseHeadersRead).ConfigureAwait(false))
        {
            var headers = new Dictionary<string, IEnumerable<string>>();
            foreach (var item_ in response.Headers)
                headers[item_.Key] = item_.Value;
            if (response.Content != null && response.Content.Headers != null)
            {
                foreach (var item_ in response.Content.Headers)
                    headers[item_.Key] = item_.Value;
            }

            var status = (int)response.StatusCode;
            if (status == 200)
            {
                var objectResponse = await ReadObjectResponseAsync<{{ operation.ResponseType.TypeName }}>(response, headers).ConfigureAwait(false);
                return objectResponse.Object;
            }

            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            throw new ApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
        }
    }
}
{%- endif -%}