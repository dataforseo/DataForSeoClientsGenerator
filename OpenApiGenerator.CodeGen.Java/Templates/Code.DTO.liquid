package {{ Namespace }};

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

{% for type in DenendentTypes %}
import {{ type.Namespace }}.{{ type.ClassName }};
{% endfor %}

public class {{ ClassName }} {% if ParentName != null and Parent.Childs != null %} extends {{ ParentName }} {% endif %} {

  {%- if ParentName != null and Parent.Childs == null and Parent.Properties.size > 0 -%}
    {% for property in Parent.Properties %}
      {%- assign camelPropertyName = property.Name | camelcase  -%}
  public static final String SERIALIZED_NAME_{{ property.JsonName | screamingcase }} = "{{ property.JsonName }}";
  @SerializedName(SERIALIZED_NAME_{{ property.JsonName | screamingcase }})
  private {{ property.Type.TypeName }} {{ camelPropertyName }};
    
  public {{ ClassName }} {{ camelPropertyName }}({{ property.Type.TypeName }} {{ camelPropertyName }}) {
    this.{{ camelPropertyName }} = {{ camelPropertyName }};
    return this;
  }
    
  /**
   * {{ property.Description | javadocs }}
   * @return {{ property.Name }}
   */
  @javax.annotation.Nullable
  public {{ property.Type.TypeName }} get{{ property.Name | pascalcase }}() {
    return {{ camelPropertyName }};
  }
    
  public void set{{ property.Name | pascalcase }}({{ property.Type.TypeName }} {{ camelPropertyName }}) {
    this.{{ camelPropertyName }} = {{ camelPropertyName }};
  }
    
    {% endfor %}
  {%- endif -%}
{% for property in Properties %}
  {%- assign camelPropertyName = property.Name | camelcase  -%}
  public static final String SERIALIZED_NAME_{{ property.JsonName | screamingcase }} = "{{ property.JsonName }}";
  @SerializedName(SERIALIZED_NAME_{{ property.JsonName | screamingcase }})
  private {{ property.Type.TypeName }} {{ camelPropertyName }};

  public {{ ClassName }} {{ camelPropertyName }}({{ property.Type.TypeName }} {{ camelPropertyName }}) {
    this.{{ camelPropertyName }} = {{ camelPropertyName }};
    return this;
  }

  /**
   * {{ property.Description | javadocs }}
   * @return {{ property.Name }}
   */
  @javax.annotation.Nullable
  public {{ property.Type.TypeName }} get{{ property.Name | pascalcase }}() {
    return {{ camelPropertyName }};
  }

  public void set{{ property.Name | pascalcase }}({{ property.Type.TypeName }} {{ camelPropertyName }}) {
    this.{{ camelPropertyName }} = {{ camelPropertyName }};
  }

{% endfor %}

  public {{ ClassName }}() {
  }

  {% if Childs == null or Childs.size == 0 %}
    
  private Map<String, Object> additionalProperties;

  public {{ ClassName }} putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }

  {% endif %}

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }


    {% if Properties.size > 0 %}
      {%- assign objectName = ClassName | camelcase -%}
    {{ ClassName }} {{ objectName }} = ({{ ClassName }}) o;
    return

      {%- if ParentName != null and Parent.Childs == null and Parent.Properties.size > 0 -%}
        {%- for property in Parent.Properties -%}
          {%- assign camelPropertyName = property.Name | camelcase -%}
          {%- if forloop.last == false -%}
        Objects.equals(this.{{ camelPropertyName }}, {{ objectName }}.{{ camelPropertyName }}) &&
          {%- else -%}
            {%- if Properties.size > 0 -%}
        Objects.equals(this.{{ camelPropertyName }}, {{ objectName }}.{{ camelPropertyName }}) &&
            {%- else -%}
        Objects.equals(this.{{ camelPropertyName }}, {{ objectName }}.{{ camelPropertyName }});  
            {%- endif -%}
          {%- endif -%}
        {%- endfor -%}
      {%- endif -%}
      {%- for property in Properties -%}
          {%- assign camelPropertyName = property.Name | camelcase -%}
          {%- if forloop.last == false -%}
        Objects.equals(this.{{ camelPropertyName }}, {{ objectName }}.{{ camelPropertyName }}) &&
          {%- else -%}
            {%- if ParentName != null and Parent.Childs != null -%}
        Objects.equals(this.{{ camelPropertyName }}, {{ objectName }}.{{ camelPropertyName }}) && 
        super.equals(o);
            {%- else -%}
        Objects.equals(this.{{ camelPropertyName }}, {{ objectName }}.{{ camelPropertyName }});  
            {%- endif -%}
          {%- endif -%}
      {%- endfor -%}
    {% else %}
      {% if ParentName != null and Parent.Childs != null %}
    return super.equals(o);
      {% else %}
    return true;
      {% endif %}
    {% endif %}
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
  return Objects.hash({{ Properties | select: "Name" | camelcase | join: ", " }} {%- if ParentName != null and Parent.Childs == null and Parent.Properties.size > 0 -%},  {{ Parent.Properties | select: "Name" | camelcase | join: ", " }}{%- endif -%});
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class {{ ClassName }} {\n");

    {%- if ParentName != null and Parent.Childs == null and Parent.Properties.size > 0 -%}
      {%- for property in Parent.Properties -%}
    sb.append("    {{ property.Name | camelcase }}: ").append(toIndentedString({{ property.Name | camelcase }})).append("\n");
      {%- endfor -%}
    {%- endif -%}
    {%- for property in Properties -%}
    sb.append("    {{ property.Name | camelcase }}: ").append(toIndentedString({{ property.Name | camelcase }})).append("\n");
    {%- endfor -%}
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    {%- if ParentName != null and Parent.Properties.size > 0 -%}
      {%- for property in Parent.Properties -%}
    openapiFields.add("{{ property.JsonName }}");
      {%- endfor -%}
    {%- endif -%}
    {% for property in Properties %}
    openapiFields.add("{{ property.JsonName }}");
    {% endfor %}

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }


  {% if Childs == null or Childs.size == 0 %}

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to {{ ClassName }}
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!{{ ClassName }}.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes '{{ ClassName }}' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<{{ ClassName }}> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get({{ ClassName }}.class));

       return (TypeAdapter<T>) new TypeAdapter<{{ ClassName }}>() {
           @Override
           public void write(JsonWriter out, {{ ClassName }} value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public {{ ClassName }} read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             {{ ClassName }} instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  {%- endif -%}

  public static {{ ClassName }} fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, {{ ClassName }}.class);
  }

  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}