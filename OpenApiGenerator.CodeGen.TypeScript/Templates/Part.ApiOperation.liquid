{%- if operation.HttpMethod == "POST" -%}
{{ operation.OperationName }}(body: {{ operation.RequestType.TypeName }}): Promise<{{ operation.ResponseType.TypeName }} | null> {
    let url_ = this.baseUrl + "{{ operation.Path }}";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(body);
    let options_: RequestInit = {
        body: content_,
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "Accept": "application/json",
            "User-Agent": "typescript-client/{{ operation.Version }}",
        }
    };
    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.process{{ operation.OperationName | pascalcase  }}(_response);
    });
}

protected process{{ operation.OperationName | pascalcase }}(response: Response): Promise<{{ operation.ResponseType.TypeName }} | null> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? {{ operation.ResponseType.TypeName }}.fromJS(resultData200) : <any>null;
            return result200;
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<{{ operation.ResponseType.TypeName | pascalcase }} | null>(null as any);
}
{%- else -%}
{{ operation.OperationName }}({%- if operation.GetParameter != null -%} {{ operation.GetParameter.Name }}: {{ operation.GetParameter.Type.TypeName }} {%- endif -%}): Promise<{{ operation.ResponseType.TypeName }} | null> {
    let url_ = this.baseUrl + "{{ operation.Path }}";
    url_ = url_.replace(/[?&]$/, "");
    {%- if operation.GetParameter != null -%}
    url_ = url_.replace("{{ "{" }}{{ operation.GetParameter.Name }}{{ "}" }}", encodeURIComponent("" + {{ operation.GetParameter.Name }}));
    {%- endif -%}
    let options_: RequestInit = {
        method: "GET",
        headers: {
            "Accept": "application/json",
            "User-Agent": "typescript-client/{{ operation.Version }}",
        }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.process{{ operation.OperationName | pascalcase  }}(_response);
    });
}

protected process{{ operation.OperationName | pascalcase }}(response: Response): Promise<{{ operation.ResponseType.TypeName }} | null> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? {{ operation.ResponseType.TypeName }}.fromJS(resultData200) : <any>null;
            return result200;
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<{{ operation.ResponseType.TypeName }} | null>(null as any);
}
{%- endif -%}