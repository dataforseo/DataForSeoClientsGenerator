{%- for type in DependentTypes -%}
import {{ "{" }} {{ type.ClassName }} {{ "}" }} from "./../models/{{ type.ClassName }}";
{%- endfor -%}
import { ApiException, throwException } from "./../models/ApiException"

export class {{ ClassName }} {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "https://{{ Host }}";
    }

{%- for operation in Operations -%}
    {% template Part.ApiOperation %}
{%- endfor -%}
}