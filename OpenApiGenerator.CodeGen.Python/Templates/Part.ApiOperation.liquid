{%- if operation.HttpMethod == "POST" -%}
@validate_call
def {{ operation.OperationName }}(
    self,
    {{ operation.RequestType.TypeName | snakecase }}: '{{ operation.RequestType.TypeName }}' = None,
    _request_timeout: Union[
        None,
        Annotated[StrictFloat, Field(gt=0)],
        Tuple[
            Annotated[StrictFloat, Field(gt=0)],
            Annotated[StrictFloat, Field(gt=0)]
        ]
    ] = None,
    _request_auth: Optional[Dict[StrictStr, Any]] = None,
    _content_type: Optional[StrictStr] = None,
    _headers: Optional[Dict[StrictStr, Any]] = None,
    _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
) -> {{ operation.ResponseType.TypeName }}:

    _param = self._{{ operation.OperationName }}_serialize(
        {{ operation.RequestType.TypeName | snakecase }}={{ operation.RequestType.TypeName | snakecase }},
        _request_auth=_request_auth,
        _content_type=_content_type,
        _headers=_headers,
        _host_index=_host_index
    )

    _response_types_map: Dict[str, Optional[str]] = {
        '200': "{{ operation.ResponseType.TypeName }}",
    }
    response_data = self.api_client.call_api(
        *_param,
        _request_timeout=_request_timeout
    )
    response_data.read()
    return self.api_client.response_deserialize(
        response_data=response_data,
        response_types_map=_response_types_map,
    ).data


    
@validate_call
def {{ operation.OperationName }}_with_http_info(
    self,
    {{ operation.RequestType.TypeName | snakecase }}: '{{ operation.RequestType.TypeName }}' = None,
    _request_timeout: Union[
        None,
        Annotated[StrictFloat, Field(gt=0)],
        Tuple[
            Annotated[StrictFloat, Field(gt=0)],
            Annotated[StrictFloat, Field(gt=0)]
        ]
    ] = None,
    _request_auth: Optional[Dict[StrictStr, Any]] = None,
    _content_type: Optional[StrictStr] = None,
    _headers: Optional[Dict[StrictStr, Any]] = None,
    _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
) -> 'ApiResponse[{{ operation.ResponseType.TypeName }}]':

    _param = self._{{ operation.OperationName }}_serialize(
        {{ operation.RequestType.TypeName | snakecase }}={{ operation.RequestType.TypeName | snakecase }},
        _request_auth=_request_auth,
        _content_type=_content_type,
        _headers=_headers,
        _host_index=_host_index
    )

    _response_types_map: Dict[str, Optional[str]] = {
        '200': "{{ operation.ResponseType.TypeName }}",
    }
    response_data = self.api_client.call_api(
        *_param,
        _request_timeout=_request_timeout
    )
    response_data.read()
    return self.api_client.response_deserialize(
        response_data=response_data,
        response_types_map=_response_types_map,
    )


@validate_call
def {{ operation.OperationName }}_without_preload_content(
    self,
    {{ operation.RequestType.TypeName | snakecase }}: '{{ operation.RequestType.TypeName }}' = None,
    _request_timeout: Union[
        None,
        Annotated[StrictFloat, Field(gt=0)],
        Tuple[
            Annotated[StrictFloat, Field(gt=0)],
            Annotated[StrictFloat, Field(gt=0)]
        ]
    ] = None,
    _request_auth: Optional[Dict[StrictStr, Any]] = None,
    _content_type: Optional[StrictStr] = None,
    _headers: Optional[Dict[StrictStr, Any]] = None,
    _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
) -> RESTResponseType:

    _param = self._{{ operation.OperationName }}_serialize(
        {{ operation.RequestType.TypeName | snakecase }}={{ operation.RequestType.TypeName | snakecase }},
        _request_auth=_request_auth,
        _content_type=_content_type,
        _headers=_headers,
        _host_index=_host_index
    )

    _response_types_map: Dict[str, Optional[str]] = {
        '200': "{{ operation.ResponseType.TypeName }}",
    }
    response_data = self.api_client.call_api(
        *_param,
        _request_timeout=_request_timeout
    )
    return response_data.response


def _{{ operation.OperationName }}_serialize(
    self,
    {{ operation.RequestType.TypeName | snakecase }},
    _request_auth,
    _content_type,
    _headers,
    _host_index,
) -> RequestSerialized:

    _host = None

    _collection_formats: Dict[str, str] = {
        '{{ operation.RequestType.TypeName }}': '',
    }

    _path_params: Dict[str, str] = {}
    _query_params: List[Tuple[str, str]] = []
    _header_params: Dict[str, Optional[str]] = _headers or {}
    _form_params: List[Tuple[str, str]] = []
    _files: Dict[str, Union[str, bytes]] = {}
    _body_params: Optional[bytes] = None

    # process the path parameters
    # process the query parameters
    # process the header parameters
    # process the form parameters
    # process the body parameter
    if {{ operation.RequestType.TypeName | snakecase }} is not None:
        _body_params = {{ operation.RequestType.TypeName | snakecase }}


    # set the HTTP header `Accept`
    if 'Accept' not in _header_params:
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

    # set the HTTP header `Content-Type`
    if _content_type:
        _header_params['Content-Type'] = _content_type
    else:
        _default_content_type = (
            self.api_client.select_header_content_type(
                [
                    'application/json'
                ]
            )
        )
        if _default_content_type is not None:
            _header_params['Content-Type'] = _default_content_type

    # authentication setting
    _auth_settings: List[str] = [
        'basicAuth'
    ]

    return self.api_client.param_serialize(
        method='POST',
        resource_path='{{ operation.Path }}',
        path_params=_path_params,
        query_params=_query_params,
        header_params=_header_params,
        body=_body_params,
        post_params=_form_params,
        files=_files,
        auth_settings=_auth_settings,
        collection_formats=_collection_formats,
        _host=_host,
        _request_auth=_request_auth
    )
{%- else -%}
@validate_call
def {{ operation.OperationName }}(
    self,
    {%- if operation.GetParameter != null -%}
    {{ operation.GetParameter.Name }}: Annotated[{{ operation.GetParameter.Type.TypeName }}, Field(description="{{ operation.GetParameter.Description }}")],
    {%- endif -%}
    _request_timeout: Union[
        None,
        Annotated[StrictFloat, Field(gt=0)],
        Tuple[
            Annotated[StrictFloat, Field(gt=0)],
            Annotated[StrictFloat, Field(gt=0)]
        ]
    ] = None,
    _request_auth: Optional[Dict[StrictStr, Any]] = None,
    _content_type: Optional[StrictStr] = None,
    _headers: Optional[Dict[StrictStr, Any]] = None,
    _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
) -> {{ operation.ResponseType.TypeName }}:

    _param = self._{{ operation.OperationName }}_serialize(
        {%- if operation.GetParameter != null -%}
        {{ operation.GetParameter.Name }}={{ operation.GetParameter.Name }},
        {%- endif -%}
        _request_auth=_request_auth,
        _content_type=_content_type,
        _headers=_headers,
        _host_index=_host_index
    )

    _response_types_map: Dict[str, Optional[str]] = {
        '200': "{{ operation.ResponseType.TypeName }}",
    }
    response_data = self.api_client.call_api(
        *_param,
        _request_timeout=_request_timeout
    )
    response_data.read()
    return self.api_client.response_deserialize(
        response_data=response_data,
        response_types_map=_response_types_map,
    ).data

@validate_call
def {{ operation.OperationName }}_with_http_info(
    self,
    {%- if operation.GetParameter != null -%}
    {{ operation.GetParameter.Name }}: Annotated[{{ operation.GetParameter.Type.TypeName }}, Field(description="{{ operation.GetParameter.Description }}")],
    {%- endif -%}
    _request_timeout: Union[
        None,
        Annotated[StrictFloat, Field(gt=0)],
        Tuple[
            Annotated[StrictFloat, Field(gt=0)],
            Annotated[StrictFloat, Field(gt=0)]
        ]
    ] = None,
    _request_auth: Optional[Dict[StrictStr, Any]] = None,
    _content_type: Optional[StrictStr] = None,
    _headers: Optional[Dict[StrictStr, Any]] = None,
    _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
) -> 'ApiResponse[{{ operation.ResponseType.TypeName }}]':

    _param = self._{{ operation.OperationName }}_serialize(
        {%- if operation.GetParameter != null -%}
        {{ operation.GetParameter.Name }}={{ operation.GetParameter.Name }},
        {%- endif -%}
        _request_auth=_request_auth,
        _content_type=_content_type,
        _headers=_headers,
        _host_index=_host_index
    )

    _response_types_map: Dict[str, Optional[str]] = {
        '200': "{{ operation.ResponseType.TypeName }}",
    }
    response_data = self.api_client.call_api(
        *_param,
        _request_timeout=_request_timeout
    )
    response_data.read()
    return self.api_client.response_deserialize(
        response_data=response_data,
        response_types_map=_response_types_map,
    )

@validate_call
def {{ operation.OperationName }}_without_preload_content(
    self,
    {%- if operation.GetParameter != null -%}
    {{ operation.GetParameter.Name }}: Annotated[{{ operation.GetParameter.Type.TypeName }}, Field(description="{{ operation.GetParameter.Description }}")],
    {%- endif -%}
    _request_timeout: Union[
        None,
        Annotated[StrictFloat, Field(gt=0)],
        Tuple[
            Annotated[StrictFloat, Field(gt=0)],
            Annotated[StrictFloat, Field(gt=0)]
        ]
    ] = None,
    _request_auth: Optional[Dict[StrictStr, Any]] = None,
    _content_type: Optional[StrictStr] = None,
    _headers: Optional[Dict[StrictStr, Any]] = None,
    _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
) -> RESTResponseType:

    _param = self._{{ operation.OperationName }}_serialize(
        {%- if operation.GetParameter != null -%}
        {{ operation.GetParameter.Name }}={{ operation.GetParameter.Name }},
        {%- endif -%}
        _request_auth=_request_auth,
        _content_type=_content_type,
        _headers=_headers,
        _host_index=_host_index
    )

    _response_types_map: Dict[str, Optional[str]] = {
        '200': "{{ operation.ResponseType.TypeName }}",
    }
    response_data = self.api_client.call_api(
        *_param,
        _request_timeout=_request_timeout
    )
    return response_data.response


def _{{ operation.OperationName }}_serialize(
    self,
    {%- if operation.GetParameter != null -%}
    {{ operation.GetParameter.Name }},
    {%- endif -%}
    _request_auth,
    _content_type,
    _headers,
    _host_index,
) -> RequestSerialized:

    _host = None

    _collection_formats: Dict[str, str] = {
    }

    _path_params: Dict[str, str] = {}
    _query_params: List[Tuple[str, str]] = []
    _header_params: Dict[str, Optional[str]] = _headers or {}
    _form_params: List[Tuple[str, str]] = []
    _files: Dict[str, Union[str, bytes]] = {}
    _body_params: Optional[bytes] = None

    {%- if operation.GetParameter != null -%}
    if {{ operation.GetParameter.Name }} is not None:
        _path_params['{{ operation.GetParameter.Name }}'] = {{ operation.GetParameter.Name }}
    {%- endif -%}

    if 'Accept' not in _header_params:
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

    _auth_settings: List[str] = [
        'basicAuth'
    ]

    return self.api_client.param_serialize(
        method='GET',
        resource_path='{{ operation.Path }}',
        path_params=_path_params,
        query_params=_query_params,
        header_params=_header_params,
        body=_body_params,
        post_params=_form_params,
        files=_files,
        auth_settings=_auth_settings,
        collection_formats=_collection_formats,
        _host=_host,
        _request_auth=_request_auth
    )

{%- endif -%}